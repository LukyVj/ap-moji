// Generated by CoffeeScript 1.9.3
var format, formats, fs, gd_bindings, lib, open_func, p, save_func, util, v;

open_func = function(format, len) {
  return function() {
    var args, callback, filename;
    args = Array.prototype.slice.call(arguments);
    filename = args.shift();
    callback = args[len - 1];
    if (typeof callback !== "function") {
      return gd_bindings["createFrom" + format].apply(this, arguments);
    }
    args.pop();
    return fs.readFile(filename, function(err, data) {
      if (err) {
        return callback(err);
      } else {
        return callback(null, gd_bindings["createFrom" + format + "Ptr"](data));
      }
    });
  };
};

save_func = function(format, len) {
  format = format.toLowerCase();
  return function() {
    var args, callback, data, filename;
    args = Array.prototype.slice.call(arguments);
    filename = args.shift();
    callback = args[len - 1];
    if (typeof callback !== "function") {
      return this[format].apply(this, arguments);
    }
    data = this[format + "Ptr"].apply(this, args);
    return fs.writeFile(filename, data, "binary", callback);
  };
};

util = require('util');

fs = require('fs');

if (fs.existsSync(lib = __dirname + '/../build/Release/node_gd.node')) {
  gd_bindings = require(lib);
} else if (fs.existsSync(lib = __dirname + '/../build/default/node_gd.node')) {
  gd_bindings = require(lib);
} else {
  throw 'unable to locate node_gd.node within build directory';
}

for (p in gd_bindings) {
  if (typeof gd_bindings[p] !== 'undefined') {
    exports[p] = gd_bindings[p];
  }
}

formats = {
  jpeg: [1, 2],
  png: [1, 2],
  gif: [1, 1],
  gd: [1, 1],
  gd2: [1, 1],
  gd2Part: [5, -1],
  WBMP: [1, 1]
};

if (gd_bindings.getGDVersion() >= '2.1.0') {
  formats.bmp = [1, 2];
}

if (gd_bindings.GD_TIFF && gd_bindings.getGDVersion() >= '2.1.0') {
  formats.tiff = [-1, 1];
}

if (gd_bindings.GD_WEBP && gd_bindings.getGDVersion() >= '2.1.0') {
  formats.webp = [1, 2];
}

for (format in formats) {
  v = formats[format];
  format = format.replace(/^[a-z]/, function(m0) {
    return m0.toUpperCase();
  });
  if (v[0] >= 0) {
    exports["open" + format] = open_func(format, v[0]);
  }
  if (v[1] >= 0) {
    gd_bindings.Image.prototype["save" + format] = save_func(format, v[1]);
  }
}

if (gd_bindings.getGDVersion() >= '2.1.1') {
  gd_bindings.Image.prototype["saveFile"] = function() {
    var args, callback;
    args = Array.prototype.slice.call(arguments);
    callback = args[args.length - 1];
    if (typeof callback !== "function") {
      return this["file"].apply(this, args);
    }
    return this["fileCallback"].apply(this, args);
  };
  exports["openFile"] = function() {
    var args, callback;
    args = Array.prototype.slice.call(arguments);
    callback = args[args.length - 1];
    if (typeof callback !== "function") {
      return this["createFromFile"].apply(this, args);
    }
    return callback(null, this["createFromFile"].apply(this, args));
  };
}
